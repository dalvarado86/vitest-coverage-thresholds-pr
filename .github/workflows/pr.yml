name: Pull Request

env:
  node_version: '22.17.0'

on:
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest
    if: github.event.pull_request.head.repo.full_name == github.repository
    
    steps:
      - name: Check PR code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.node_version }}
          cache: npm
          cache-dependency-path: package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Build
        run: npm run build
    
  test:
    # This matrix tests both the main and pull request branches
    name: Test ${{ matrix.artifact }}
    needs: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - branch: main
            artifact: main
          - branch: ${{ github.head_ref }}
            artifact: pull-request
    
    steps:
      - name: Checkout ${{ matrix.branch }}
        uses: actions/checkout@v4
        with:
          ref: ${{ matrix.branch }}
          repository: ${{ github.repository }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.node_version }}
          cache: npm
          cache-dependency-path: package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run tests with coverage
        run: npx vitest run --coverage.enabled --coverage.reporter=json --coverage.reporter=json-summary --coverage.reporter=lcov

      - name: Copy thresholds config (if exists)
        run: |
          if [ -f vitest.thresholds.js ]; then
            cp vitest.thresholds.js coverage/
          fi

      - name: Upload coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.artifact }}
          path: coverage/

  report-coverage:
    name: Report coverage comparison
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: Download PR coverage
        uses: actions/download-artifact@v4
        with:
          name: coverage-pull-request
          path: pr-coverage

      - name: Download main coverage
        continue-on-error: true
        uses: actions/download-artifact@v4
        with:
          name: coverage-main
          path: main-coverage

      - name: Report coverage
        if: always()
        uses: davelosert/vitest-coverage-report-action@v2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          json-summary-path: pr-coverage/coverage-summary.json
          json-summary-compare-path: main-coverage/coverage-summary.json
          json-final-path: pr-coverage/coverage-final.json
          vite-config-path: pr-coverage/vitest.thresholds.js
          comment-on: pr

  coverage-gate:
    name: Coverage gate
    needs: [report-coverage]
    runs-on: ubuntu-latest
    steps:
      - name: Download PR coverage
        uses: actions/download-artifact@v4
        with:
          name: coverage-pull-request
          path: pr-coverage

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.node_version }}

      - name: Load thresholds from vitest.thresholds.js
        id: thresholds
        shell: bash
        run: |
          # Use node to read the thresholds file and set values in GitHub Actions output
          node --input-type=module <<'NODE'
          import { pathToFileURL } from 'node:url';
          import path from 'node:path';
          import { appendFileSync } from 'node:fs';

          const out = process.env.GITHUB_OUTPUT;
          if (!out) {
            console.error('GITHUB_OUTPUT is not set');
            process.exit(1);
          }

          const fileUrl = pathToFileURL(path.resolve('pr-coverage/vitest.thresholds.js')).href;
          const mod = await import(fileUrl).catch(() => ({}));
          const t = (mod && (mod.default ?? mod)) || {};

          for (const k of ['lines','statements','functions','branches']) {
            const v = Number.isFinite(t[k]) ? t[k] : 85;
            appendFileSync(out, `${k}=${v}\n`, { encoding: 'utf8' });
          }
          NODE

      - name: Check thresholds
        shell: bash
        run: |
          SUM=pr-coverage/coverage-summary.json

          # jq is installed in ubuntu-latest by default
          L=$(jq '.total.lines.pct // 0' "$SUM")
          S=$(jq '.total.statements.pct // 0' "$SUM")
          F=$(jq '.total.functions.pct // 0' "$SUM")
          B=$(jq '.total.branches.pct // 0' "$SUM")

          echo "Coverage (PR):"
          echo "  lines:      $L% (min ${{ steps.thresholds.outputs.lines }}%)"
          echo "  statements: $S% (min ${{ steps.thresholds.outputs.statements }}%)"
          echo "  functions:  $F% (min ${{ steps.thresholds.outputs.functions }}%)"
          echo "  branches:   $B% (min ${{ steps.thresholds.outputs.branches }}%)"

          FAIL=0
          awk -v a="$L" -v b="${{ steps.thresholds.outputs.lines }}"       'BEGIN{ if (a<b) exit 1 }' || { echo "❌ lines below threshold"; FAIL=1; }
          awk -v a="$S" -v b="${{ steps.thresholds.outputs.statements }}"  'BEGIN{ if (a<b) exit 1 }' || { echo "❌ statements below threshold"; FAIL=1; }
          awk -v a="$F" -v b="${{ steps.thresholds.outputs.functions }}"   'BEGIN{ if (a<b) exit 1 }' || { echo "❌ functions below threshold"; FAIL=1; }
          awk -v a="$B" -v b="${{ steps.thresholds.outputs.branches }}"    'BEGIN{ if (a<b) exit 1 }' || { echo "❌ branches below threshold"; FAIL=1; }

          if [ "$FAIL" -ne 0 ]; then
            echo "Coverage gate failed."
            exit 1
          fi

          echo "✅ Coverage gate passed."